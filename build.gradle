group 'com.buptnml'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

//配置外部属性
ext {
    spring_version = "5.0.6.RELEASE"
}

configurations {
    mybatisGenerator
}

dependencies {

    compile group: 'dom4j', name: 'dom4j', version: '1.6.1'

    compile 'com.fasterxml.jackson.core:jackson-core:2.8.5'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.5'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.5'
    compile 'org.springframework:spring-webmvc:4.3.7.RELEASE'
    compile 'org.springframework:spring-orm:4.3.7.RELEASE'
    compile 'org.springframework:spring-context-support:4.3.7.RELEASE'
    compile 'org.springframework:spring-aop:5.0.0.RELEASE'
    compile 'org.springframework:spring-aspects:5.0.0.RELEASE'
    // https://mvnrepository.com/artifact/org.springframework/spring-test
    testCompile group: 'org.springframework', name: 'spring-test', version: '2.5'

    compile 'mysql:mysql-connector-java:5.1.38'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '6.4.0.jre8'
    compile 'org.mybatis:mybatis:3.4.2'
    compile 'org.mybatis:mybatis-spring:1.3.1'
    compile 'com.github.pagehelper:pagehelper:5.0.0'
    compile 'org.slf4j:slf4j-log4j12:1.7.25'
    compile 'tk.mybatis:mapper:3.4.0'
    compile 'com.alibaba:druid:1.0.31'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile "io.springfox:springfox-swagger2:2.7.0"
    compile 'io.springfox:springfox-swagger-ui:2.7.0'
    compile group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.6'

    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

    //MyBatis
    compile "org.mybatis:mybatis:3.0.5"

    //mybatis spring 插件
    compile "org.mybatis:mybatis-spring:1.0.1"

    //数据库驱动
    compile "mysql:mysql-connector-java:5.1.23"

    //连接池
    compile "com.alibaba:druid:1.0.12"

    //json
    compile "com.google.code.gson:gson:2.2.4"

    //log4j
    compile "log4j:log4j:1.2.17"

    // https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp
    compile group: 'commons-dbcp', name: 'commons-dbcp', version: '1.4'

    //单元测试
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'


    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-maven-plugin:1.3.5'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.38'
    mybatisGenerator 'tk.mybatis:mapper:3.4.0'

//    compile group: 'com.ibm.db2', name: 'db2jcc', version: '8.1'
//    compile group: 'com.ibm.db2.jcc', name: 'db2jcc4', version: '10.1'
//    compile group: 'com.ibm.db2', name: 'db2jcc_license_cu', version: '9.7'

}

//执行mybatisGenerate任务自动生成model mapper和dao文件
def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/jdbc.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate  {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("ds1.jdbc_driver")
    ant.properties['connectionURL'] = properties.getProperty("ds1.jdbc_url")
    ant.properties['userId'] = properties.getProperty("ds1.jdbc_username")
    ant.properties['password'] = properties.getProperty("ds1.jdbc_password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("ds1.model.package")
    ant.properties['daoPackage'] = properties.getProperty("ds1.dao.package")
    ant.properties['sqlMapperPackage'] = properties.getProperty("ds1.xml.sqlmapper.package")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )

    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'daoPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}

task mybatisGenerateDB2  {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("ds3.jdbc_driver")
    ant.properties['connectionURL'] = properties.getProperty("ds3.jdbc_url")
    ant.properties['userId'] = properties.getProperty("ds3.jdbc_username")
    ant.properties['password'] = properties.getProperty("ds3.jdbc_password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("ds3.model.package")
    ant.properties['daoPackage'] = properties.getProperty("ds3.dao.package")
    ant.properties['sqlMapperPackage'] = properties.getProperty("ds3.xml.sqlmapper.package")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )

    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/generatorConfig3.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'daoPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}